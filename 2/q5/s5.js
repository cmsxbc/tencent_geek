let program = [
33,
3,
25,
2,
16,
68,
119,
68,
105,
68,
110,
68,
100,
68,
111,
68,
119,
45,
16,
68,
67,
68,
65,
68,
49,
68,
56,
68,
48,
68,
55,
68,
69,
68,
66,
65,
17,
2426,
33,
7,
25,
2,
25,
3,
25,
4,
25,
5,
25,
6,
12,
4,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
55,
0,
52,
1,
41,
12,
5,
55,
0,
41,
31,
0,
12,
6,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
55,
1,
52,
1,
41,
31,
0,
63,
6,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
0,
65,
57,
34,
9,
32,
123,
37,
17,
243,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
54,
68,
54,
68,
49,
68,
53,
68,
57,
68,
52,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
103,
12,
5,
55,
0,
41,
31,
0,
37,
37,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
1,
65,
57,
34,
9,
32,
272,
37,
17,
392,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
50,
68,
52,
68,
55,
68,
55,
68,
54,
68,
50,
68,
55,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
252,
12,
4,
58,
48,
53,
6,
66,
41,
31,
0,
12,
4,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
55,
0,
41,
31,
0,
12,
6,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
55,
1,
52,
1,
41,
31,
0,
63,
8,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
2,
65,
57,
34,
9,
32,
511,
37,
17,
631,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
54,
68,
56,
68,
55,
68,
56,
68,
55,
68,
57,
68,
52,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
491,
12,
5,
55,
0,
41,
31,
0,
37,
37,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
3,
65,
57,
34,
9,
32,
660,
37,
17,
780,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
55,
68,
53,
68,
52,
68,
54,
68,
51,
68,
54,
68,
52,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
640,
12,
4,
58,
48,
53,
6,
66,
41,
31,
0,
12,
4,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
55,
0,
41,
31,
0,
12,
6,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
55,
1,
52,
1,
41,
31,
0,
63,
8,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
4,
65,
57,
34,
9,
32,
899,
37,
17,
1019,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
50,
68,
57,
68,
57,
68,
49,
68,
57,
68,
49,
68,
57,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
879,
12,
5,
55,
0,
41,
31,
0,
37,
37,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
5,
65,
57,
34,
9,
32,
1048,
37,
17,
1168,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
50,
68,
49,
68,
56,
68,
50,
68,
54,
68,
52,
68,
51,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
1028,
12,
4,
58,
48,
53,
6,
66,
41,
31,
0,
12,
4,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
55,
0,
41,
31,
0,
12,
6,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
55,
1,
52,
1,
41,
31,
0,
63,
8,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
6,
65,
57,
34,
9,
32,
1287,
37,
17,
1407,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
55,
68,
57,
68,
51,
68,
48,
68,
48,
68,
57,
68,
52,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
1267,
12,
5,
55,
0,
41,
31,
0,
37,
37,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
7,
65,
57,
34,
9,
32,
1436,
37,
17,
1556,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
52,
68,
52,
68,
52,
68,
56,
68,
54,
68,
49,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
1416,
12,
4,
58,
48,
53,
6,
66,
41,
31,
0,
12,
4,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
55,
0,
41,
31,
0,
12,
6,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
55,
1,
52,
1,
41,
31,
0,
63,
8,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
8,
65,
57,
34,
9,
32,
1675,
37,
17,
1795,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
53,
68,
53,
68,
57,
68,
54,
68,
48,
68,
50,
68,
52,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
1655,
12,
5,
55,
0,
41,
31,
0,
37,
37,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
9,
65,
57,
34,
9,
32,
1824,
37,
17,
1944,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
54,
68,
50,
68,
52,
68,
54,
68,
56,
68,
55,
68,
51,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
1804,
12,
4,
58,
48,
53,
6,
66,
41,
31,
0,
12,
4,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
55,
0,
41,
31,
0,
12,
6,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
55,
1,
52,
1,
41,
31,
0,
63,
8,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
10,
65,
57,
34,
9,
32,
2063,
37,
17,
2183,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
56,
68,
55,
68,
50,
68,
54,
68,
57,
68,
48,
68,
57,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
2043,
12,
5,
55,
0,
41,
31,
0,
37,
37,
12,
5,
48,
12,
3,
16,
68,
97,
24,
55,
11,
65,
57,
34,
9,
32,
2212,
37,
17,
2332,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
53,
68,
56,
68,
49,
68,
49,
68,
55,
68,
55,
68,
51,
52,
1,
44,
41,
31,
0,
12,
6,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
12,
5,
58,
48,
58,
31,
1,
31,
0,
55,
1,
66,
41,
37,
13,
0,
31,
0,
0,
63,
5,
37,
17,
2192,
12,
4,
58,
48,
53,
6,
66,
41,
31,
0,
12,
4,
58,
48,
16,
68,
66,
68,
105,
68,
103,
68,
73,
68,
110,
68,
116,
45,
16,
68,
49,
68,
49,
68,
50,
68,
53,
68,
56,
68,
57,
68,
57,
68,
57,
68,
48,
68,
54,
68,
56,
68,
52,
68,
50,
68,
53,
68,
57,
68,
55,
52,
1,
15,
41,
31,
0,
16,
68,
112,
68,
97,
68,
114,
68,
115,
68,
101,
68,
73,
68,
110,
68,
116,
45,
53,
4,
52,
1,
7,
5,
7,
63,
4,
3,
38,
0,
1,
3,
8,
31,
0,
5,
7,
37,
37
];
var __TENCENT_CHAOS_STACK = function() {
    function __TENCENT_CHAOS_VM(f, e, c, r, l, g, s, a) {
        var n = !r;
        f = +f,
        e = e || [0],
        r = r || [[this], [{}]],
        l = l || {};
        var t = [],
            o = null;
        var instr0=function() { // xor
            r[r.length - 2] = r[r.length - 2] | r.pop()
        };

        var instr3=function() {
            for (var o = e[f++], u = [], n = e[f++], t = e[f++], p = [], h = 0; h < n; h++) {
                u[e[f++]] = r[e[f++]];
            }
            for (h = 0; h < t; h++) {
                p[h] = e[f++];
            }
            console.log("instr3================================");
            console.log(`f:${f}`);
            console.log(`e:${e}`);
            console.log(`c:${c}`);
            console.log(`r:${r}`);
            console.log(`l:${l}`);
            console.log(`g:${g}`);
            console.log(`s:${s}`);
            console.log(`a:${a}`);
            console.log(`o:${o}`);
            console.log(`n:${n}`);
            console.log(`t:${t}`);
            console.log(`h:${h}`);
            console.log(`p:${p}`);
            console.log(`f:${f}`);
            console.log(`u:${u}`);
            console.log(`r:${r}`);
            console.log("instr3--------------------------------");
            r.push(function i() {
                var n = u.slice(0);
                n[0] = [this],
                n[1] = [arguments],
                n[2] = [i];
                for (var t = 0; t < p.length && t < arguments.length; t++) {
                    if (0 < p[t]) {
                        n[p[t]] = [arguments[t]];
                    }
                }
                return __TENCENT_CHAOS_VM(o, e, c, n, l, g, s, a)
            })
        };

        var instr5=function() {
            r.push(undefined);
        };

        var instr7=function() { // this will cause program exit
            return !0
        };

        var instr8=function() {
            var n = r[r.length - 2];
            n[0][n[1]] = r[r.length - 1]
        };

        var instr9=function() { // not
            r.push(!r.pop())
        };

        var instr12=function() { // op
            r.push([e[f++]])
        };

        var instr13=function() { //  ;set stack top
            r[r.length - 1] = e[f++]
        };

        var instr15=function() { // mod
            r[r.length - 2] = r[r.length - 2] % r.pop()
        };

        var instr16=function() {
            r.push("")
        };

        var instr17=function() { // jump
            f = e[f++]
        };

        var instr24=function() {
            var n = r.pop();
            r.push([r[r.pop()][0], n])
        };

        var instr25=function() { // init if undef
            var n = e[f++];
            r[n] = r[n] === undefined ? [] : r[n]
        };

        var instr31=function() {
            var n = e[f++],
                t = r[r.length - 2 - n];
            r[r.length - 2 - n] = r.pop(), r.push(t)
        };

        var instr32=function() { // jump if stack top
            var n = e[f++];
            r[r.length - 1] && (f = n)
        };

        var instr33=function() { // brk, set stack size
            r.length = e[f++]
        };

        var instr34=function() { // ge
            r[r.length - 2] = r[r.length - 2] >= r.pop()
        };

        var instr37=function() { // pop
            r.pop()
        };

        var instr41=function() {
            r[r[r.length - 2][0]][0] = r[r.length - 1]
        };

        var instr44=function() {
            r[r.length - 2] = r[r.length - 2] * r.pop()
        };

        var instr45=function() {
            r.push([c, r.pop()])
        };

        var instr48=function() {
            r.push(r[r.pop()[0]][0])
        };

        var instr52=function() {
            var n = e[f++],
                t = n ? r.slice(-n) : [];
            r.length -= n;
            var o = r.pop();
            r.push(o[0][o[1]].apply(o[0], t))
        };
        var instr53=function() {
            r.push(r[e[f++]][0])
        };

        var instr55=function() {
            r.push(e[f++])
        };

        var instr57=function() {
            var n = r.pop();
            r.push(n[0][n[1]])
        };

        var instr58=function() {
            r.push(r[r.length - 1])
        };

        var instr63=function() {
            r.length -= e[f++]
        };

        var instr65=function() {
            var n = r.pop(),
                t = r.pop();
            r.push([t[0][t[1]], n])
        };

        var instr66=function() {
            // pop two from stack and then, add
            r[r.length - 2] = r[r.length - 2] + r.pop()
        };

        var instr68=function() {
            r[r.length - 1] += String.fromCharCode(e[f++])
        };
        var u = [
            instr0,  // 0
            ,
            ,
            instr3, // 3
            ,
            instr5, // 5
            ,
            instr7, // 7
            instr8, // 8
            instr9, // 9
            ,
            ,
            instr12, // 12,
            instr13, // 13
            ,
            instr15, // 15
            instr16, // 16
            instr17, // 17
            ,
            ,
            ,
            ,
            ,
            ,
            instr24, // 24
            instr25, // 25
            ,
            ,
            ,
            ,
            ,
            instr31, // 31
            instr32, // 32
            instr33, // 33
            instr34, // 34
            ,
            ,
            instr37, // 37
            ,
            ,
            ,
            instr41, // 41
            ,
            ,
            instr44, // 44
            instr45, // 45
            ,
            ,
            instr48, // 48
            ,
            ,
            ,
            instr52, // 52
            instr53, // 53
            ,
            instr55, // 55
            ,
            instr57, // 57
            instr58, // 58
            ,
            ,
            ,
            ,
            instr63, // 63
            ,
            instr65, // 65
            instr66, // 66
            ,
            instr68, // 68
        ];

        for (0;;) {
            try {
                for (var p = false; !p;) {
                    console.log('===========')
                    console.log(f)
                    console.log(r)
                    p = u[e[f++]]();
                }
                if (0, o) throw o;
                // return n ? (r.pop(), r.slice(3 + __TENCENT_CHAOS_VM.v)) : r.pop()
                if (n) {
                    return r.pop(), r.slice(3 + __TENCENT_CHAOS_VM.v);
                } else {
                    return r.pop();
                }
            } catch (i) {
                0;
                var h = t.pop();
                if (h === undefined) throw i;
                o = i, f = h[0], r.length = h[1], h[2] && (r[h[2]][0] = o)
            }
        }
    }
    __TENCENT_CHAOS_VM.v = 0;
    return __TENCENT_CHAOS_VM(0, program, window)
}();
__TENCENT_CHAOS_STACK.g = function() {
    return __TENCENT_CHAOS_STACK.shift()[0]
};